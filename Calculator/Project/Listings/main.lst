C51 COMPILER V9.60.7.0   MAIN                                                              12/27/2024 17:21:35 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg52.h>
   2          
   3          // 类型定义
   4          typedef unsigned char uchar;
   5          typedef unsigned int uint;
   6          
   7          sbit duxuan = P2^1;
   8          sbit weixuan = P2^2;
   9          
  10          // 延时函数
  11          void delayms(uint ms) {
  12   1          uint i, j;
  13   1          for (i = ms; i > 0; i--)
  14   1              for (j = 110; j > 0; j--);
  15   1      }
  16          
  17          // 数码管显示函数
  18          void display(uchar num[]) {
  19   1          uchar segcode[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
  20   1          uchar select_data[] = {0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f};
  21   1          uint i;
  22   1          for (i = 0; i < 8; i++) {
  23   2              duxuan = 1; P0 = 0x00; duxuan = 0; // 清空段选
  24   2              weixuan = 1; P0 = 0xff; weixuan = 0; // 清空位选
  25   2              weixuan = 1; P0 = select_data[i]; weixuan = 0; // 位选
  26   2              duxuan = 1; P0 = segcode[num[i]]; duxuan = 0; // 段选
  27   2              delayms(1);
  28   2          }
  29   1      }
  30          
  31          // 清零显示函数
  32          void clearDisplay(uchar* display_data) {
  33   1          uchar i;
  34   1          for (i = 0; i < 8; i++) {
  35   2              display_data[i] = 0; // 清零数组
  36   2          }
  37   1      }
  38          
  39          // 矩阵键盘扫描函数
  40          uchar matr_keyscan() {
  41   1          uchar temp, keycode = 0xff;
  42   1          // 按行扫描
  43   1          uchar scan_row[4] = {0xfe, 0xfd, 0xfb, 0xf7};
  44   1          uchar key_map[4][4] = {
  45   1              {7, 8, 9, '/'}, 
  46   1              {4, 5, 6, '*'}, 
  47   1              {1, 2, 3, '-'}, 
  48   1              {'C', 0, '=', '+'}
  49   1          };
  50   1      
  51   1          unsigned char row, col;
  52   1          for (row = 0; row < 4; row++) {
  53   2              P1 = scan_row[row];
  54   2              temp = P1 & 0xf0;
C51 COMPILER V9.60.7.0   MAIN                                                              12/27/2024 17:21:35 PAGE 2   

  55   2              if (temp != 0xf0) {
  56   3                  delayms(10); // 消抖
  57   3                  temp = P1 & 0xf0;
  58   3                  if (temp != 0xf0) {
  59   4                      for (col = 0; col < 4; col++) {
  60   5                          if ((temp & (0x10 << col)) == 0) {
  61   6                              while ((P1 & 0xf0) != 0xf0); // 等待释放
  62   6                              return key_map[row][col];
  63   6                          }
  64   5                      }
  65   4                  }
  66   3              }
  67   2          }
  68   1          return 0xff;
  69   1      }
  70          
  71          // 计算函数
  72          int calculate(int a, int b, char op) {
  73   1          switch (op) {
  74   2              case '+': return a + b;
  75   2              case '-': return a - b;
  76   2              case '*': return a * b;
  77   2              case '/': return b != 0 ? a / b : 0; // 防止除零错误
  78   2              default: return 0;
  79   2          }
  80   1      }
  81          
  82          void main() {
  83   1          uchar display_data[8] = {0, 0, 0, 0, 0, 0, 0, 0}; 
  84   1          int operand1 = 0, operand2 = 0;
  85   1          char operator = 0;
  86   1          int result = 0;
  87   1          char input_stage = 0; // 0: 输入第一个操作数, 1: 输入操作符, 2: 输入第二个操作数
  88   1          int temp;
  89   1          uint i;
  90   1      
  91   1          while (1) {
  92   2              uchar key = matr_keyscan();
  93   2              if (key != 0xff) {
  94   3                  if (key == 'C') {
  95   4                      clearDisplay(display_data);
  96   4                      operand1 = operand2 = result = 0;
  97   4                      operator = 0;
  98   4                      input_stage = 0;
  99   4                  } else if (key == '=') {
 100   4                      if (input_stage == 2) {
 101   5                          result = calculate(operand1, operand2, operator);
 102   5                          operand1 = result;
 103   5                          operand2 = 0;
 104   5                          input_stage = 1;
 105   5                      }
 106   4                  } else if (key >= 0 && key <= 9) {
 107   4                      if (input_stage == 0) {
 108   5                          operand1 = operand1 * 10 + key;
 109   5                      } else if (input_stage == 2) {
 110   5                          operand2 = operand2 * 10 + key;
 111   5                      }
 112   4                  } else {
 113   4                      if (input_stage == 0) {
 114   5                          input_stage = 1;
 115   5                      }
 116   4                      if (input_stage == 1) {
C51 COMPILER V9.60.7.0   MAIN                                                              12/27/2024 17:21:35 PAGE 3   

 117   5                          operator = key;
 118   5                          input_stage = 2;
 119   5                          clearDisplay(display_data); // 输入运算符后清零显示
 120   5                      }
 121   4                  }
 122   3      
 123   3                  // 更新显示数据
 124   3                  temp = input_stage == 2 ? operand2 : operand1;
 125   3                  for (i = 0; i < 8; i++) {
 126   4                      display_data[7 - i] = temp % 10;
 127   4                      temp /= 10;
 128   4                  }
 129   3              }
 130   2              display(display_data); // 实时显示
 131   2          }
 132   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    677    ----
   CONSTANT SIZE    =     46    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      68
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
